first_grid <- add_pattern(matrice, grid_data, 25, 25)
grid_data <- first_grid
grid_data <- update_grid(grid_data)
library(dplyr)
library(ggplot2)
library(plotly)
####################################################################
size <- 3
# Calcul du nombre total de combinaisons
num_combinations <- 2^(size^2)
# Génération de toutes les combinaisons possibles de 0 et 1
combinations <- expand.grid(rep(list(0:1), size^2))
matrice <- matrix(as.vector(t(combinations[500,])), nrow = size, byrow = TRUE)
generate_grid <- function(n) {
matrix(0, n, n)
}
add_pattern <- function(pattern, grid, x, y) {
grid[x:(x+ncol(pattern)-1), y:(y+nrow(pattern)-1)] <- t(pattern)
grid
}
update_grid <- function(grid) {
n <- nrow(grid)
new_grid <- grid
for (i in 1:n) {
for (j in 1:n) {
neighbors <- sum(grid[max(1, i-1):min(n, i+1), max(1, j-1):min(n, j+1)]) - grid[i, j]
if (grid[i, j] == 1 && (neighbors < 2 || neighbors > 3)) {
new_grid[i, j] <- 0
} else if (grid[i, j] == 0 && neighbors == 3) {
new_grid[i, j] <- 1
}
}
}
new_grid
}
first_grid <- add_pattern(matrice, grid_data, 25, 25)
grid <- generate_grid(50)
grid_data <- grid
first_grid <- add_pattern(matrice, grid_data, 25, 25)
grid_data <- first_grid
grid_data <- update_grid(grid_data)
n = 1
while (!isTRUE(all.equal(grid_data, first_grid)) && !all(grid_data == 0) && n < 10) {
grid_data <- update_grid(grid_data)
n <- n + 1
}
n
matrice <- matrix(c(0, 1, 0,
0, 1, 0,
0, 1, 0), nrow = 3, byrow = TRUE)
first_grid <- add_pattern(matrice, grid_data, 25, 25)
grid_data <- first_grid
grid_data <- update_grid(grid_data)
n = 1
while (!isTRUE(all.equal(grid_data, first_grid)) && !all(grid_data == 0) && n < 10) {
grid_data <- update_grid(grid_data)
n <- n + 1
}
n
matrice
first_grid <- add_pattern(matrice, grid_data, 25, 25)
grid_data <- first_grid
