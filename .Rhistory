pattern <- matrix(c(0, 1, 1, 1, 1,
1, 0, 0, 0, 1,
0, 0, 0, 0, 1,
1, 0, 0, 1, 0), nrow = 4, byrow = TRUE)
grid[x:(x+3), y:(y+4)] <- pattern
grid
}
add_mwss <- function(grid, x, y) {
pattern <- matrix(c(0, 1, 1, 1, 1, 1,
1, 0, 0, 0, 0, 1,
0, 0, 0, 0, 0, 1,
1, 0, 0, 0, 1, 0,
0, 0, 1, 0, 0, 0), nrow = 5, byrow = TRUE)
grid[x:(x+4), y:(y+5)] <- pattern
grid
}
add_hwss <- function(grid, x, y) {
pattern <- matrix(c(0, 1, 1, 1, 1, 1, 1,
1, 0, 0, 0, 0, 0, 1,
0, 0, 0, 0, 0, 0, 1,
1, 0, 0, 0, 0, 1, 0,
0, 0, 1, 1, 0, 0, 0), nrow = 5, byrow = TRUE)
grid[x:(x+4), y:(y+6)] <- pattern
grid
}
# Taille de la grille
#grid_size <- 20
server <- (function(input, output, session) {
#grid_size <- input$taille
grid <- reactiveVal(generate_grid(n = 50))
running <- reactiveVal(FALSE)
# Observer le bouton Start
observeEvent(input$start, {
running(TRUE)
})
# Observer le bouton Stop
observeEvent(input$stop, {
running(FALSE)
})
observeEvent(input$reset, {
running(FALSE)
grid(generate_grid(input$taille))
})
observeEvent(input$randomize, {
running(FALSE)
grid(random_grid(input$taille))
})
observe({
if (running()) {
invalidateLater(input$sec, session)
isolate({
#n <- input$taille
#grid <- reactiveVal(generate_grid(n))
grid(update_grid(grid()))
})
}
})
observeEvent(input$glider, {
isolate({
new_grid <- grid()
size <- nrow(new_grid)
new_grid <- add_glider(new_grid, input$taille/2, input$taille/2)
grid(new_grid)
})
})
observeEvent(input$lwss, {
isolate({
new_grid <- grid()
size <- nrow(new_grid)
new_grid <- add_lwss(new_grid, input$taille/2, input$taille/2)
grid(new_grid)
})
})
observeEvent(input$mwss, {
isolate({
new_grid <- grid()
size <- nrow(new_grid)
new_grid <- add_mwss(new_grid, input$taille/2, input$taille/2)
grid(new_grid)
})
})
observeEvent(input$hwss, {
isolate({
new_grid <- grid()
size <- nrow(new_grid)
new_grid <- add_hwss(new_grid, input$taille/2, input$taille/2)
grid(new_grid)
})
})
observeEvent(event_data("plotly_click"), {
click <- event_data("plotly_click")
if (!is.null(click)) {
j <- floor(click$y) + 1
i <- input$taille - floor(click$x)
new_grid <- grid()
new_grid[i, j] <- 1 - new_grid[i, j]
grid(new_grid)
}
})
output$plot <- renderPlotly({
#n <- input$taille
#grid <- reactiveVal(generate_grid(n))
grid_data <- grid()
plot_ly(
z = t(grid_data[nrow(grid_data):1, ]),
type = "heatmap",
colors = c("white", "black"),
showscale = FALSE
) %>% layout(
#yaxis = list(
#  scaleanchor = "x",
#  scaleratio = 1
#),
xaxis = list(showticklabels = FALSE, showline = FALSE, title = ""),
yaxis = list(showticklabels = FALSE, showline = FALSE, title = "")
)
})
})
shinyApp(ui = ui, server = server)
library(dplyr)
library(ggplot2)
library(plotly)
generate_grid <- function(n) {
matrix(0, n, n)
}
grid <- generate_grid(50)
add_pattern <- function(pattern, grid, x, y) {
grid[x:(x+ncol(pattern)-1), y:(y+nrow(pattern)-1)] <- t(pattern)
grid
}
update_grid <- function(grid) {
n <- nrow(grid)
new_grid <- grid
for (i in 1:n) {
for (j in 1:n) {
neighbors <- sum(grid[max(1, i-1):min(n, i+1), max(1, j-1):min(n, j+1)]) - grid[i, j]
if (grid[i, j] == 1 && (neighbors < 2 || neighbors > 3)) {
new_grid[i, j] <- 0
} else if (grid[i, j] == 0 && neighbors == 3) {
new_grid[i, j] <- 1
}
}
}
new_grid
}
size <- 3
num_combinations <- 2^(size^2)
combinations <- expand.grid(rep(list(0:1), size^2))
contains_matrix <- function(grid, pattern) {
grid_rows <- nrow(grid)
grid_cols <- ncol(grid)
pattern_rows <- nrow(pattern)
pattern_cols <- ncol(pattern)
for (i in 1:(grid_rows - pattern_rows + 1)) {
for (j in 1:(grid_cols - pattern_cols + 1)) {
sub_grid <- grid[i:(i + pattern_rows - 1), j:(j + pattern_cols - 1)]
if (all(sub_grid == pattern)) {
return(TRUE)
}
}
}
return(FALSE)
}
for (i in seq_len(nrow(combinations))) {
grid_data <- add_pattern(matrix(as.vector(t(combinations[i,1:9])), nrow = 3, byrow = TRUE), grid, 25, 25)
n <- 1
max_iterations <- 10
type <- 'st'
while (n <= max_iterations) {
grid_data <- update_grid(grid_data)
# Condition 1: grid_data == first_grid
if (isTRUE(all.equal(grid_data, first_grid))) {
type <- 'osc'
break
}
# Condition 2: all(grid_data == 0)
if (all(grid_data == 0)) {
type <- 'null'
break
}
# Condition 3: contains_matrix(grid_data, matrice)
if (contains_matrix(grid_data, matrix(as.vector(t(combinations[i,1:9])), nrow = 3, byrow = TRUE))) {
type <- 'spaceships'
break
}
n <- n + 1
}
# Mettre à jour les résultats
combinations$type[i] <- type
combinations$n[i] <- n
}
for (i in seq_len(nrow(combinations))) {
grid_data <- add_pattern(matrix(as.vector(t(combinations[i,1:9])), nrow = 3, byrow = TRUE), grid, 25, 25)
first_grid <- grid_data
n <- 1
max_iterations <- 10
type <- 'st'
while (n <= max_iterations) {
grid_data <- update_grid(grid_data)
# Condition 1: grid_data == first_grid
if (isTRUE(all.equal(grid_data, first_grid))) {
type <- 'osc'
break
}
# Condition 2: all(grid_data == 0)
if (all(grid_data == 0)) {
type <- 'null'
break
}
# Condition 3: contains_matrix(grid_data, matrice)
if (contains_matrix(grid_data, matrix(as.vector(t(combinations[i,1:9])), nrow = 3, byrow = TRUE))) {
type <- 'spaceships'
break
}
n <- n + 1
}
# Mettre à jour les résultats
combinations$type[i] <- type
combinations$n[i] <- n
}
# Afficher les résultats
print(combinations)
combinations %>% dplyr::group_by(type) %>% dplyr::summarise(n = n(), .groups = 'drop')
library(dplyr)
library(ggplot2)
library(plotly)
####################################################################
generate_grid <- function(n) {
matrix(0, n, n)
}
grid <- generate_grid(50)
add_pattern <- function(pattern, grid, x, y) {
grid[x:(x+ncol(pattern)-1), y:(y+nrow(pattern)-1)] <- t(pattern)
grid
}
update_grid <- function(grid) {
n <- nrow(grid)
new_grid <- grid
for (i in 1:n) {
for (j in 1:n) {
neighbors <- sum(grid[max(1, i-1):min(n, i+1), max(1, j-1):min(n, j+1)]) - grid[i, j]
if (grid[i, j] == 1 && (neighbors < 2 || neighbors > 3)) {
new_grid[i, j] <- 0
} else if (grid[i, j] == 0 && neighbors == 3) {
new_grid[i, j] <- 1
}
}
}
new_grid
}
size <- 3
num_combinations <- 2^(size^2)
combinations <- expand.grid(rep(list(0:1), size^2))
contains_matrix <- function(grid, pattern) {
grid_rows <- nrow(grid)
grid_cols <- ncol(grid)
pattern_rows <- nrow(pattern)
pattern_cols <- ncol(pattern)
for (i in 1:(grid_rows - pattern_rows + 1)) {
for (j in 1:(grid_cols - pattern_cols + 1)) {
sub_grid <- grid[i:(i + pattern_rows - 1), j:(j + pattern_cols - 1)]
if (all(sub_grid == pattern)) {
return(TRUE)
}
}
}
return(FALSE)
}
for (i in seq_len(nrow(combinations))) {
grid_data <- add_pattern(matrix(as.vector(t(combinations[i,1:9])), nrow = 3, byrow = TRUE), grid, 25, 25)
first_grid <- grid_data
n <- 1
max_iterations <- 10
type <- 'st'
while (n <= max_iterations) {
grid_data <- update_grid(grid_data)
# Condition 1: all(grid_data == 0)
if (all(grid_data == 0)) {
type <- 'null'
break
}
# Condition 2: grid_data == first_grid
if (isTRUE(all.equal(grid_data, first_grid))) {
type <- 'osc'
break
}
# Condition 3: contains_matrix(grid_data, matrice)
if (contains_matrix(grid_data, matrix(as.vector(t(combinations[i,1:9])), nrow = 3, byrow = TRUE)) & isFALSE(all.equal(grid_data, first_grid))) {
type <- 'spaceships'
break
}
n <- n + 1
}
# Mettre à jour les résultats
combinations$type[i] <- type
combinations$n[i] <- n
}
# Afficher les résultats
print(combinations)
combinations %>% dplyr::group_by(type) %>% dplyr::summarise(n = n(), .groups = 'drop')
write.xlsx(combinations, 'C:/Users/William/Desktop/LIFE-GAME/patterns.xlsx')
library(openxlsx)
write.xlsx(combinations, 'C:/Users/William/Desktop/LIFE-GAME/patterns.xlsx')
write.xlsx(combinations, 'C:/Users/William/OneDrive/Desktop/LIFE-GAME/patterns.xlsx')
write.xlsx(combinations, 'C:/Users/Users/OneDrive/Desktop/LIFE-GAME/patterns.xlsx')
write.xlsx(combinations, 'C:/Users/User/OneDrive/Desktop/LIFE-GAME/patterns.xlsx')
library(shiny)
library(plotly)
ui <- (fluidPage(
tags$head(
tags$style(
HTML('
body {
background-color: #333333; /* To change the background color. */
color: #ffffff; /* To change the font color. */
}
#plot {
min-width: 500px;
min-height: 500px;
max-width: 500px;
max-height: 500px;
overflow-x: auto;
}
'
)
)
),
titlePanel("LIFE GAME"),
sidebarLayout(
sidebarPanel(
actionButton("start", "Start"),
actionButton("stop", "Stop"),
actionButton("reset", "Reset"),
actionButton("randomize", "Randomize"),
actionButton("glider", "Add Glider"),
actionButton("lwss", "Add LWSS"),
actionButton("mwss", "Add MWSS"),
actionButton("hwss", "Add HWSS"),
helpText("Cliquez sur les cellules pour les activer/désactiver."),
),
sidebarLayout(
sidebarPanel(
sliderInput("taille",
"Taille de la matrice:",
min = 10,
max = 100,
value = 50),
sliderInput("sec",
"Secondes:",
min = 200,
max = 5000,
value = 1000)
),
mainPanel(
plotlyOutput("plot")
)
)
)
))
library(shiny)
library(plotly)
# Fonction pour générer une grille vide
generate_grid <- function(n) {
matrix(0, n, n)
}
# Fonction pour générer une grille aléatoire
random_grid <- function(n) {
matrix(sample(0:1, n * n, replace = TRUE), n, n)
}
# Fonction pour mettre à jour la grille selon les règles du jeu de la vie
update_grid <- function(grid) {
n <- nrow(grid)
new_grid <- grid
for (i in 1:n) {
for (j in 1:n) {
neighbors <- sum(grid[max(1, i-1):min(n, i+1), max(1, j-1):min(n, j+1)]) - grid[i, j]
if (grid[i, j] == 1 && (neighbors < 2 || neighbors > 3)) {
new_grid[i, j] <- 0
} else if (grid[i, j] == 0 && neighbors == 3) {
new_grid[i, j] <- 1
}
}
}
new_grid
}
add_glider <- function(grid, x, y) {
pattern <- matrix(c(0, 1, 0,
0, 0, 1,
1, 1, 1), nrow = 3, byrow = TRUE)
grid[x:(x+2), y:(y+2)] <- pattern
grid
}
add_lwss <- function(grid, x, y) {
pattern <- matrix(c(0, 1, 1, 1, 1,
1, 0, 0, 0, 1,
0, 0, 0, 0, 1,
1, 0, 0, 1, 0), nrow = 4, byrow = TRUE)
grid[x:(x+3), y:(y+4)] <- pattern
grid
}
add_mwss <- function(grid, x, y) {
pattern <- matrix(c(0, 1, 1, 1, 1, 1,
1, 0, 0, 0, 0, 1,
0, 0, 0, 0, 0, 1,
1, 0, 0, 0, 1, 0,
0, 0, 1, 0, 0, 0), nrow = 5, byrow = TRUE)
grid[x:(x+4), y:(y+5)] <- pattern
grid
}
add_hwss <- function(grid, x, y) {
pattern <- matrix(c(0, 1, 1, 1, 1, 1, 1,
1, 0, 0, 0, 0, 0, 1,
0, 0, 0, 0, 0, 0, 1,
1, 0, 0, 0, 0, 1, 0,
0, 0, 1, 1, 0, 0, 0), nrow = 5, byrow = TRUE)
grid[x:(x+4), y:(y+6)] <- pattern
grid
}
# Taille de la grille
#grid_size <- 20
server <- (function(input, output, session) {
#grid_size <- input$taille
grid <- reactiveVal(generate_grid(n = 50))
running <- reactiveVal(FALSE)
# Observer le bouton Start
observeEvent(input$start, {
running(TRUE)
})
# Observer le bouton Stop
observeEvent(input$stop, {
running(FALSE)
})
observeEvent(input$reset, {
running(FALSE)
grid(generate_grid(input$taille))
})
observeEvent(input$randomize, {
running(FALSE)
grid(random_grid(input$taille))
})
observe({
if (running()) {
invalidateLater(input$sec, session)
isolate({
#n <- input$taille
#grid <- reactiveVal(generate_grid(n))
grid(update_grid(grid()))
})
}
})
observeEvent(input$glider, {
isolate({
new_grid <- grid()
size <- nrow(new_grid)
new_grid <- add_glider(new_grid, input$taille/2, input$taille/2)
grid(new_grid)
})
})
observeEvent(input$lwss, {
isolate({
new_grid <- grid()
size <- nrow(new_grid)
new_grid <- add_lwss(new_grid, input$taille/2, input$taille/2)
grid(new_grid)
})
})
observeEvent(input$mwss, {
isolate({
new_grid <- grid()
size <- nrow(new_grid)
new_grid <- add_mwss(new_grid, input$taille/2, input$taille/2)
grid(new_grid)
})
})
observeEvent(input$hwss, {
isolate({
new_grid <- grid()
size <- nrow(new_grid)
new_grid <- add_hwss(new_grid, input$taille/2, input$taille/2)
grid(new_grid)
})
})
observeEvent(event_data("plotly_click"), {
click <- event_data("plotly_click")
if (!is.null(click)) {
j <- floor(click$y) + 1
i <- input$taille - floor(click$x)
new_grid <- grid()
new_grid[i, j] <- 1 - new_grid[i, j]
grid(new_grid)
}
})
output$plot <- renderPlotly({
#n <- input$taille
#grid <- reactiveVal(generate_grid(n))
grid_data <- grid()
plot_ly(
z = t(grid_data[nrow(grid_data):1, ]),
type = "heatmap",
colors = c("white", "black"),
showscale = FALSE
) %>% layout(
#yaxis = list(
#  scaleanchor = "x",
#  scaleratio = 1
#),
xaxis = list(showticklabels = FALSE, showline = FALSE, title = ""),
yaxis = list(showticklabels = FALSE, showline = FALSE, title = "")
)
})
})
shinyApp(ui = ui, server = server)
